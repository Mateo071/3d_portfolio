/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { a } from "@react-spring/three";
import { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";

import ModdedIslandScene from "../assets/3d/moddedisland.glb";

const ModdedIsland = ({
  isRotating,
  setIsRotating,
  setCurrentStage,
  currentFocusPoint,
  ...props
}) => {
  const moddedIslandRef = useRef();

  const { nodes, materials } = useGLTF(ModdedIslandScene);
  
 // Get access to the Three.js renderer and viewport
const { gl, viewport } = useThree();

// Use a ref for the last mouse x position
  const lastX = useRef(0);
  // Use a ref for rotation speed
  const rotationSpeed = useRef(0);
  // Define a damping factor to control rotation damping
  const dampingFactor = 0.95;

  // Handle pointer (mouse or touch) down event
  const handlePointerDown = (event) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(true);

   // Calculate the clientX based on whether it's a touch event or a mouse event
    const clientX = event.touches ? event.touches[0].clientX : event.clientX;

    // Store the current clientX position for reference
    lastX.current = clientX;
  };

  // Handle pointer (mouse or touch) up event
  const handlePointerUp = (event) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(false);
  };

  // Handle pointer (mouse or touch) move event
  const handlePointerMove = (event) => {
    event.stopPropagation();
    event.preventDefault();
    if (isRotating) {
      // If rotation is enabled, calculate the change in clientX position
      const clientX = event.touches ? event.touches[0].clientX : event.clientX;

      // calculate the change in the horizontal position of the mouse cursor or touch input,
      // relative to the viewport's width
      const delta = (clientX - lastX.current) / viewport.width;

      // Update the island's rotation based on the mouse/touch movement
      moddedIslandRef.current.rotation.y += delta * 0.01 * Math.PI;

      // Update the reference for the last clientX position
      lastX.current = clientX;

      // Update the rotation speed
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  // Handle keydown events
  const handleKeyDown = (event) => {
    if (event.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);

      moddedIslandRef.current.rotation.y += 0.005 * Math.PI;
      rotationSpeed.current = 0.007;
    } else if (event.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);

      moddedIslandRef.current.rotation.y -= 0.005 * Math.PI;
      rotationSpeed.current = -0.007;
    }
  };

  // Handle keyup events
  const handleKeyUp = (event) => {
    if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
      setIsRotating(false);
    }
  };

  useEffect(() => {
    // Add event listeners for pointer and keyboard events
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);

    // Remove event listeners when component unmounts
    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

  // This function is called on each frame update
  useFrame(() => {
    // If not rotating, apply damping to slow down the rotation (smoothly)
    if (!isRotating) {
      // Apply damping factor
      rotationSpeed.current *= dampingFactor;

      // Stop rotation when speed is very small
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      moddedIslandRef.current.rotation.y += rotationSpeed.current;
    } else {
      // When rotating, determine the current stage based on island's orientation
      const rotation = moddedIslandRef.current.rotation.y;

      /**
       * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
       * The goal is to ensure that the rotation value remains within a specific range to
       * prevent potential issues with very large or negative rotation values.
       *  Here's a step-by-step explanation of what this code does:
       *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
       *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
       *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
       *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
       *     This is done to ensure that the value remains positive and within the range of
       *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
       *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
       *     modulo operation to the value obtained in step 2. This step guarantees that the value
       *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
       *     circle in radians.
       */
      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }
  });

  return (
    <a.group ref={moddedIslandRef} {...props}>
<group position={[0, 15, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59007.geometry}
          material={materials.glass}
          position={[0.102, -16.128, 0.211]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59043.geometry}
          material={materials.color}
          position={[-2.075, -16.171, 2.376]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59044.geometry}
          material={materials.color}
          position={[-3.549, -15.811, -1.613]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59045.geometry}
          material={materials.color}
          position={[2.102, -16.049, 2.33]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59046.geometry}
          material={materials.color}
          position={[-2.951, -14.675, 5.244]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59047.geometry}
          material={materials.color}
          position={[-1.386, -13.842, 6.343]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59048.geometry}
          material={materials.color}
          position={[2.504, -15.767, 2.081]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59049.geometry}
          material={materials.color}
          position={[-1.597, -16.745, -2.227]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59050.geometry}
          material={materials.color}
          position={[-2.922, -16.228, 1.707]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59051.geometry}
          material={materials.color}
          position={[-4.186, -14.87, 3.771]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59052.geometry}
          material={materials.color}
          position={[0.039, -13.892, -0.179]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59053.geometry}
          material={materials.color}
          position={[0.061, -14.739, -6.546]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59054.geometry}
          material={materials.color}
          position={[2.826, -16.256, -0.79]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59055.geometry}
          material={materials.color}
          position={[2.301, -16.224, 1.33]}
        />
        <group position={[-3.271, -8.628, 1.208]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Mesh13359.geometry}
            material={materials.color}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Mesh13359_1.geometry}
            material={materials.emission}
          />
        </group>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59059.geometry}
          material={materials.color}
          position={[2.229, -16.151, -3.138]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59060.geometry}
          material={materials.color}
          position={[-2.277, -16.388, -2.949]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59061.geometry}
          material={materials.color}
          position={[4.496, -15.148, -4.767]}
          rotation={[-0.177, -0.018, -0.189]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59062.geometry}
          material={materials.color}
          position={[0.02, -14.649, 6.283]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59063.geometry}
          material={materials.color}
          position={[-4.479, -14.974, -3.527]}
        />
        <group position={[1.24, -11.07, -1.561]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Mesh13367.geometry}
            material={materials.color}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Mesh13367_1.geometry}
            material={materials.emission}
          />
        </group>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59065.geometry}
          material={materials.color}
          position={[-4.336, -11.799, 0.235]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59066.geometry}
          material={materials.color}
          position={[-0.026, -16.314, 2.189]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59067.geometry}
          material={materials.color}
          position={[-4.084, -11.622, 4.94]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59068.geometry}
          material={materials.color}
          position={[2.808, -15.953, -2.121]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59069.geometry}
          material={materials.color}
          position={[1.513, -16.291, 1.882]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59070.geometry}
          material={materials.color}
          position={[1.354, -13.832, 6.343]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59071.geometry}
          material={materials.color}
          position={[4.827, -14.796, 3.948]}
        />
        <group position={[0.706, -5.722, -0.548]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Mesh13375.geometry}
            material={materials.color}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Mesh13375_1.geometry}
            material={materials.emission}
          />
        </group>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59073.geometry}
          material={materials.color}
          position={[0.035, -12.4, -5.457]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59074.geometry}
          material={materials.color}
          position={[-4.046, -12.656, -4.314]}
        />
        <group position={[2.075, -8.345, -2.28]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Mesh13378.geometry}
            material={materials.color}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Mesh13378_1.geometry}
            material={materials.emission}
          />
        </group>
        <group position={[-1.451, -7.542, 0.327]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Mesh13379.geometry}
            material={materials.color}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Mesh13379_1.geometry}
            material={materials.emission}
          />
        </group>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59077.geometry}
          material={materials.color}
          position={[0.102, -16.128, 0.211]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59078.geometry}
          material={materials.color}
          position={[-10.253, -21.688, 1.971]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59079.geometry}
          material={materials.color}
          position={[-10.275, -21.845, 3.353]}
          rotation={[-0.471, 1.134, 0.672]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59080.geometry}
          material={materials.color}
          position={[7.996, -16.805, -7.477]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_59081.geometry}
          material={materials.color}
          position={[3.627, -16.815, 9.585]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_77102.geometry}
          material={materials.color}
          position={[6.085, -19.697, -5.319]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_77103.geometry}
          material={materials.color}
          position={[2.718, -14.756, 5.822]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_77104.geometry}
          material={materials.color}
          position={[5.303, -15.032, -3.853]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_77105.geometry}
          material={materials.color}
          position={[5.77, -14.893, -2.862]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_77106.geometry}
          material={materials.color}
          position={[-4.755, -15.019, -0.323]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_77107.geometry}
          material={materials.color}
          position={[-8.445, -21.6, 3.943]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_77108.geometry}
          material={materials.color}
          position={[5.021, -16.775, 8.007]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_77109.geometry}
          material={materials.color}
          position={[-5.435, -14.774, 2.216]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.land_77111.geometry}
          material={materials.color}
          position={[5.143, -16.824, 9.995]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.polySurface2922.geometry}
          material={materials.color}
          position={[6.161, -20.366, -6.782]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.polySurface2923.geometry}
          material={materials.color}
          position={[-9.123, -22.118, 2.15]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.polySurface2924.geometry}
          material={materials.color}
          position={[4.182, -17.466, 9.168]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Sphere034.geometry}
          material={materials.glass}
          position={[0.857, -17.868, -10.474]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Sphere035.geometry}
          material={materials.glass}
          position={[-10.092, -17.769, -4.751]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Sphere036.geometry}
          material={materials.glass}
          position={[9.397, -18.284, 3.159]}
          rotation={[0, -0.183, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Sphere037.geometry}
          material={materials.glass}
          position={[-3.121, -20.743, 7.861]}
        />
      </group>
      <group position={[5.262, -1.78, 8.148]} rotation={[3.01, -0.58, 2.996]}>
        <skinnedMesh
          geometry={nodes.horse_001.geometry}
          material={materials.material}
          skeleton={nodes.horse_001.skeleton}
        />
        <primitive object={nodes.Root} />
      </group>
      <group position={[2.319, 0.25, 6.617]} rotation={[3.115, 0.962, 3.02]}>
        <skinnedMesh
          geometry={nodes.dog_001.geometry}
          material={materials.material}
          skeleton={nodes.dog_001.skeleton}
        />
        <primitive object={nodes.Root_1} />
      </group>
      <group position={[0.033, 1.696, -0.247]} rotation={[-0.089, -1.448, -0.113]}>
        <skinnedMesh
          geometry={nodes.deer_001.geometry}
          material={materials.material}
          skeleton={nodes.deer_001.skeleton}
        />
        <primitive object={nodes.Root_2} />
      </group>
      <group position={[-4.244, 0.197, -5.124]} rotation={[0.006, 0.666, -0.037]}>
        <skinnedMesh
          geometry={nodes.kitty_001.geometry}
          material={materials['material.001']}
          skeleton={nodes.kitty_001.skeleton}
        />
        <primitive object={nodes.Root_3} />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.chicken_001.geometry}
        material={materials['material.001']}
        position={[-4.523, -0.073, -1.029]}
        rotation={[0, -1.134, 0]}
      />
    </a.group>
  );
};

export default ModdedIsland;
